package ug.adamtrawinski.transakcje.service;

import ug.adamtrawinski.transakcje.domain.Laptop;

import java.sql.*;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

public class LaptopServiceJDBC implements LaptopService {
    private Connection connection;

    private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableLaptop = "CREATE TABLE Laptop(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50) UNIQUE, used bit, releasedate date, price decimal(15,2))";

    private final String ADD_LAPTOP = "INSERT INTO Laptop (name, used, releasedate, price) VALUES (?, ?, ?, ?)";
    private final String DELETE_LAPTOP = "DELETE FROM Laptop WHERE id = ?";
    private final String DELETE_LAPTOPS = "DELETE FROM Laptop";
    private final String SELECT_LAPTOPS = "SELECT id, name, used, releasedate, price FROM Laptop";
    private final String SELECT_LAPTOP_BY_NAME = "SELECT id, name, used, releasedate, price FROM Laptop WHERE name = ?";
    private final String SELECT_LAPTOP_USED = "SELECT id, name, used, releasedate, price FROM Laptop WHERE used = true";
    private final String SELECT_LAPTOP_NEWER_THAN = "SELECT id, name, used, releasedate, price FROM Laptop WHERE releasedate > ?";
    private final String SELECT_LAPTOP_PRICE_BETWEEN = "SELECT id, name, used, releasedate, price FROM Laptop WHERE price >= ? AND price <= ?";
    private final String SELECT_LAPTOP_NAME_LIKE = "SELECT id, name, used, releasedate, price FROM Laptop WHERE LCASE(name) LIKE LCASE(CONCAT('%', ?, '%'))";
    private final String CLEAR_TABLE = "TRUNCATE TABLE LAPTOP RESTART IDENTITY";
    private final String SELECT_LAPTOP_BY_ID = "SELECT id, name, used, releasedate, price FROM Laptop WHERE id = ?";



    PreparedStatement insertLaptopPStmt;
    PreparedStatement deleteLaptopPStmt;
    PreparedStatement deleteLaptopsPStmt;
    PreparedStatement selectLaptopsPStmt;
    PreparedStatement selectLaptopByNamePStmt;
    PreparedStatement selectLaptopUsedPStmt;
    PreparedStatement selectLaptopNewerThanPStmt;
    PreparedStatement selectLaptopPriceBetweenPStmt;
    PreparedStatement selectLaptopNameLikePStmt;
    PreparedStatement clearTablePStmt;
    PreparedStatement selectLaptopByIdPStmt;

    private Statement statement;

    public LaptopServiceJDBC() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Laptop".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists) {
                statement.executeUpdate(createTableLaptop);
            }

            insertLaptopPStmt = connection.prepareStatement(ADD_LAPTOP);
            deleteLaptopPStmt = connection.prepareStatement(DELETE_LAPTOP);
            deleteLaptopsPStmt = connection.prepareStatement(DELETE_LAPTOPS);
            selectLaptopsPStmt = connection.prepareStatement(SELECT_LAPTOPS);
            selectLaptopByNamePStmt = connection.prepareStatement(SELECT_LAPTOP_BY_NAME);
            selectLaptopUsedPStmt = connection.prepareStatement(SELECT_LAPTOP_USED);
            selectLaptopNewerThanPStmt = connection.prepareStatement(SELECT_LAPTOP_NEWER_THAN);
            selectLaptopPriceBetweenPStmt = connection.prepareStatement(SELECT_LAPTOP_PRICE_BETWEEN);
            selectLaptopNameLikePStmt = connection.prepareStatement(SELECT_LAPTOP_NAME_LIKE);
            clearTablePStmt = connection.prepareStatement(CLEAR_TABLE);
            selectLaptopByIdPStmt = connection.prepareStatement(SELECT_LAPTOP_BY_ID);
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private int addLaptopLowLevel(Laptop laptop) throws SQLException {
        insertLaptopPStmt.setString(1, laptop.getName());
        insertLaptopPStmt.setBoolean(2, laptop.isUsed());
        insertLaptopPStmt.setDate(3, laptop.getReleaseDate());
        insertLaptopPStmt.setDouble(4, laptop.getPrice());
        return insertLaptopPStmt.executeUpdate();
    }

    @Override
    public boolean addLaptop(Laptop laptop) {
        boolean result = false;
        try {
            int noOfRecords = addLaptopLowLevel(laptop);
            if(noOfRecords == 1) {
                return true;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public boolean deleteLaptop(long id) {
        boolean result = false;
        try {
            deleteLaptopPStmt.setLong(1, id);
            int noOfRecords = deleteLaptopPStmt.executeUpdate();
            if(noOfRecords == 1) {
                return true;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public boolean deleteLaptops() {
        boolean result = false;
        try {
            deleteLaptopsPStmt.executeUpdate();
            return true;
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public Laptop getLaptopByName(String searchName) {
        Laptop result = null;
        try {
            selectLaptopByNamePStmt.setString(1, searchName);
            ResultSet rs = selectLaptopByNamePStmt.executeQuery();
            if(rs.next()) {
                result = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Laptop> getAllLaptops() {
        List<Laptop> result = new ArrayList<>();
        try {
            ResultSet rs = selectLaptopsPStmt.executeQuery();
            while (rs.next()) {
                Laptop laptop = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
                result.add(laptop);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Laptop> getUsedLaptops() {
        List<Laptop> result = new ArrayList<>();
        try {
            ResultSet rs = selectLaptopUsedPStmt.executeQuery();
            while (rs.next()) {
                Laptop laptop = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
                result.add(laptop);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public boolean addAllLaptops(List<Laptop> laptops) {
        try {
            connection.setAutoCommit(false);
            for (Laptop laptop: laptops) {
                addLaptopLowLevel(laptop);
            }
            connection.commit();
            return true;
        }
        catch (SQLException e) {
            System.out.println("Wycofanie transakcji");
            try {
                connection.rollback();
            }
            catch (SQLException e1) {
                System.out.println("Jest Åºle");
                e1.printStackTrace();
            }
        }

        return false;
    }

    @Override
    public List<Laptop> getLaptopsNewerThan(Date date) {
        List<Laptop> result = new ArrayList<>();
        try {
            selectLaptopNewerThanPStmt.setDate(1, date);
            ResultSet rs = selectLaptopNewerThanPStmt.executeQuery();
            while (rs.next()) {
                Laptop laptop = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
                result.add(laptop);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Laptop> getLaptopsPriceBetween(double min, double max) {
        List<Laptop> result = new ArrayList<>();
        try {
            selectLaptopPriceBetweenPStmt.setDouble(1, min);
            selectLaptopPriceBetweenPStmt.setDouble(2, max);
            ResultSet rs = selectLaptopNewerThanPStmt.executeQuery();
            while (rs.next()) {
                Laptop laptop = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
                result.add(laptop);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Laptop> getLaptopsNameLike(String name) {
        List<Laptop> result = new ArrayList<>();
        try {
            selectLaptopNameLikePStmt.setString(1, name);
            ResultSet rs = selectLaptopNameLikePStmt.executeQuery();
            while (rs.next()) {
                Laptop laptop = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
                result.add(laptop);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public void clearTable() {
        try {
            clearTablePStmt.executeUpdate();
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Laptop getLaptopById(long id) {
        Laptop result = null;
        try {
            selectLaptopByIdPStmt.setLong(1, id);
            ResultSet rs = selectLaptopByIdPStmt.executeQuery();
            if(rs.next()) {
                result = new Laptop(rs.getLong("id"),
                        rs.getString("name"),
                        rs.getBoolean("used"),
                        rs.getDate("releasedate"),
                        rs.getDouble("price"));
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }
}
