package ug.adamtrawinski.projekt.service;

import ug.adamtrawinski.projekt.domain.Laptop;

import java.sql.*;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

public class LaptopServiceJDBC implements LaptopService {
    private Connection connection;

    private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableLaptop = "CREATE TABLE Laptop(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50), used bit, releasedate date, price decimal(15,2))";

    private final String ADD_LAPTOP = "INSERT INTO Laptop (name, used, releasedate, price) VALUES (?, ?, ?, ?)";
    private final String DELETE_LAPTOP = "DELETE FROM Laptop WHERE id = ?";
    private final String DELETE_LAPTOPS = "DELETE FROM Laptop";
    private final String SELECT_LAPTOPS = "SELECT id, name, used, releasedate, price FROM Laptop";
    private final String SELECT_LAPTOP_BY_NAME = "SELECT id, name, used, releasedate, price FROM Laptop WHERE name = ?";


    PreparedStatement insertLaptopPStmt;
    PreparedStatement deleteLaptopPStmt;
    PreparedStatement deleteLaptopsPStmt;
    PreparedStatement selectLaptopsPStmt;
    PreparedStatement selectLaptopByNamePStmt;

    private Statement statement;

    public LaptopServiceJDBC() throws SQLException {
        connection = DriverManager.getConnection(URL);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("Laptop".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists) {
            statement.executeUpdate(createTableLaptop);
        }

        insertLaptopPStmt = connection.prepareStatement(ADD_LAPTOP);
        deleteLaptopPStmt = connection.prepareStatement(DELETE_LAPTOP);
        deleteLaptopsPStmt = connection.prepareStatement(DELETE_LAPTOPS);
        selectLaptopsPStmt = connection.prepareStatement(SELECT_LAPTOPS);
        selectLaptopByNamePStmt = connection.prepareStatement(SELECT_LAPTOP_BY_NAME);
    }

    @Override
    public boolean addLaptop(Laptop laptop) {
        boolean result = false;
        try {
            insertLaptopPStmt.setString(1, laptop.getName());
            insertLaptopPStmt.setBoolean(2, laptop.isUsed());
            insertLaptopPStmt.setDate(3, laptop.getReleaseDate());
            insertLaptopPStmt.setDouble(4, laptop.getPrice());
            int noOfRecords = insertLaptopPStmt.executeUpdate();
            if(noOfRecords == 1) {
                return true;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public boolean deleteLaptop(long id) {
        boolean result = false;
        try {
            deleteLaptopPStmt.setLong(1, id);
            int noOfRecords = deleteLaptopPStmt.executeUpdate();
            if(noOfRecords == 1) {
                return true;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public boolean deleteLaptops() {
        boolean result = false;
        try {
            deleteLaptopsPStmt.executeUpdate();
            return true;
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public Laptop getLaptopByName(String searchName) {
        Laptop result = null;
        try {
            selectLaptopByNamePStmt.setString(1, searchName);
            ResultSet rs = selectLaptopByNamePStmt.executeQuery();
            if(rs.next()) {
                long id = rs.getLong("id");
                String name = rs.getString("name");
                boolean used = rs.getBoolean("used");
                Date releaseDate = rs.getDate("releasedate");
                double price = rs.getDouble("price");

                result = new Laptop(id, name, used, releaseDate, price);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    @Override
    public List<Laptop> getAllLaptops() {
        List<Laptop> result = new ArrayList<>();
        try {
            ResultSet rs = selectLaptopsPStmt.executeQuery();
            while (rs.next()) {
                long id = rs.getLong("id");
                String name = rs.getString("name");
                boolean used = rs.getBoolean("used");
                Date releaseDate = rs.getDate("releasedate");
                double price = rs.getDouble("price");

                Laptop laptop = new Laptop(id, name, used, releaseDate, price);
                result.add(laptop);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }
}
